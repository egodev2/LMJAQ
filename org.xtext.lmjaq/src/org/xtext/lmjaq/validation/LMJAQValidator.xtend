/*
 * generated by Xtext 2.25.0
 */
package org.xtext.lmjaq.validation

import org.eclipse.xtext.validation.Check

import static extension java.lang.Character.*
import org.xtext.lmjaq.lMJAQ.AbstractClass
import org.xtext.lmjaq.lMJAQ.AbstractProperty
import org.xtext.lmjaq.lMJAQ.Property
import org.xtext.lmjaq.lMJAQ.LMJAQPackage
import java.util.List
import java.util.HashMap

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class LMJAQValidator extends AbstractLMJAQValidator {
	
	
	// public static final String INVALID_NAME = "invalidName";
	public static final String DUPLICATE_PROPERTY = "DuplicateProperty"
	
	//
	// @Check
	// public void checkGreetingStartsWithCapital(Greeting greeting) {
	// if (!Character.isUpperCase(greeting.getName().charAt(0))) {
	// warning("Name should start with a capital",
	// LMJAQPackage.Literals.GREETING__NAME,
	// INVALID_NAME);
	// }
	// }
	@Check def checkForRepeatedProperty(AbstractClass abstractClass) {
		
		val abstractPropertyList = abstractClass.abstractProperties
		var List<Property> propertyList = newArrayList()
		
		
		
		
		//warning(LMJAQPackage.Literals.PROPERTY.name, LMJAQPackage.eINSTANCE.abstractClass_Name )
		//warning(LMJAQPackage.Literals.ABSTRACT_PROPERTY__FORMAT.name, LMJAQPackage.eINSTANCE.abstractClass_Name)
		
		// (currentCandidate.format.eClass.name)
		
		// Filter abstract properties that contain a property 
		for(abstractProperty : abstractPropertyList)
		{
			
			var currentCandidate = abstractProperty
			
			if(LMJAQPackage.Literals.PROPERTY.name.equalsIgnoreCase(currentCandidate.format.eClass.name))
			{
				// warning("INSERI", LMJAQPackage.eINSTANCE.abstractClass_Name)
				propertyList.add(currentCandidate.format as Property)
			}	
			
			//warning("AbstractP: " + abstractProperty.format.eClass.name + " >> KEK" , LMJAQPackage.eINSTANCE.abstractClass_Name)
		}
		
		// Mapping all written properties
		var HashMap<String, Integer> propertySet = newHashMap()
		
		// Map properties and look for repeated
		
		/* 
				for(property : propertyList)
		{
			// TO UP
			var String propertyTypeName = property.eClass.name
			// warning("propertyType: " + propertyTypeName, LMJAQPackage.eINSTANCE.abstractClass_Name )
			
			if(propertySet.containsKey(propertyTypeName))
			{
				var cnt = propertySet.get(propertyTypeName)
				propertySet.replace(propertyTypeName,cnt + 1)
				
				// issue error - TO UP
				error("Mais de uma propriedade do mesmo tipo declarada. Exclua uma delas. '" + property.eClass.name + 
						"'",
						 LMJAQPackage.eINSTANCE.abstractClass_Name , 
						 DUPLICATE_PROPERTY)
				return			
			}
			else 
			{	
				propertySet.put(propertyTypeName, 1)
			}
			
		}
		*/
		
	 }
	 
	 /* 
	 @Check def checkTest(AbstractClass c)
	 {
	 	if(c.name.charAt(0).lowerCase)
	 	{
	 		warning("Teste", LMJAQPackage.eINSTANCE.abstractClass_Name)
	 	}
	 }
	 */
}
