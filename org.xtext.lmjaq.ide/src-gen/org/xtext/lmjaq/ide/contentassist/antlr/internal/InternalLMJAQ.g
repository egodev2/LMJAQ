/*
 * generated by Xtext 2.25.0
 */
grammar InternalLMJAQ;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.lmjaq.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.lmjaq.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.lmjaq.services.LMJAQGrammarAccess;

}
@parser::members {
	private LMJAQGrammarAccess grammarAccess;

	public void setGrammarAccess(LMJAQGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getAbstractElmentsAssignment()); }
		(rule__Model__AbstractElmentsAssignment)*
		{ after(grammarAccess.getModelAccess().getAbstractElmentsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractElementAccess().getElementTypeAssignment()); }
		(rule__AbstractElement__ElementTypeAssignment)
		{ after(grammarAccess.getAbstractElementAccess().getElementTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulePackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
		(rule__PackageDeclaration__Group__0)
		{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractClass
entryRuleAbstractClass
:
{ before(grammarAccess.getAbstractClassRule()); }
	 ruleAbstractClass
{ after(grammarAccess.getAbstractClassRule()); } 
	 EOF 
;

// Rule AbstractClass
ruleAbstractClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractClassAccess().getGroup()); }
		(rule__AbstractClass__Group__0)
		{ after(grammarAccess.getAbstractClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractClassType
entryRuleAbstractClassType
:
{ before(grammarAccess.getAbstractClassTypeRule()); }
	 ruleAbstractClassType
{ after(grammarAccess.getAbstractClassTypeRule()); } 
	 EOF 
;

// Rule AbstractClassType
ruleAbstractClassType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeAssignment()); }
		(rule__AbstractClassType__TypeAssignment)
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTela
entryRuleTela
:
{ before(grammarAccess.getTelaRule()); }
	 ruleTela
{ after(grammarAccess.getTelaRule()); } 
	 EOF 
;

// Rule Tela
ruleTela 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTelaAccess().getTelaKeyword()); }
		'Tela'
		{ after(grammarAccess.getTelaAccess().getTelaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjeto
entryRuleObjeto
:
{ before(grammarAccess.getObjetoRule()); }
	 ruleObjeto
{ after(grammarAccess.getObjetoRule()); } 
	 EOF 
;

// Rule Objeto
ruleObjeto 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjetoAccess().getObjetoKeyword()); }
		'Objeto'
		{ after(grammarAccess.getObjetoAccess().getObjetoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractProperty
entryRuleAbstractProperty
:
{ before(grammarAccess.getAbstractPropertyRule()); }
	 ruleAbstractProperty
{ after(grammarAccess.getAbstractPropertyRule()); } 
	 EOF 
;

// Rule AbstractProperty
ruleAbstractProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractPropertyAccess().getGroup()); }
		(rule__AbstractProperty__Group__0)
		{ after(grammarAccess.getAbstractPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassReference
entryRuleClassReference
:
{ before(grammarAccess.getClassReferenceRule()); }
	 ruleClassReference
{ after(grammarAccess.getClassReferenceRule()); } 
	 EOF 
;

// Rule ClassReference
ruleClassReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassReferenceAccess().getTypeAssignment()); }
		(rule__ClassReference__TypeAssignment)
		{ after(grammarAccess.getClassReferenceAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeAssignment()); }
		(rule__Property__PropertyTypeAssignment)
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleestaAtivo
entryRuleestaAtivo
:
{ before(grammarAccess.getEstaAtivoRule()); }
	 ruleestaAtivo
{ after(grammarAccess.getEstaAtivoRule()); } 
	 EOF 
;

// Rule estaAtivo
ruleestaAtivo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEstaAtivoAccess().getAtivoKeyword()); }
		'Ativo'
		{ after(grammarAccess.getEstaAtivoAccess().getAtivoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIU
entryRuleIU
:
{ before(grammarAccess.getIURule()); }
	 ruleIU
{ after(grammarAccess.getIURule()); } 
	 EOF 
;

// Rule IU
ruleIU 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIUAccess().getIUKeyword()); }
		'IU'
		{ after(grammarAccess.getIUAccess().getIUKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePosicao
entryRulePosicao
:
{ before(grammarAccess.getPosicaoRule()); }
	 rulePosicao
{ after(grammarAccess.getPosicaoRule()); } 
	 EOF 
;

// Rule Posicao
rulePosicao 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPosicaoAccess().getPosicaoKeyword()); }
		'Posicao'
		{ after(grammarAccess.getPosicaoAccess().getPosicaoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponente
entryRuleComponente
:
{ before(grammarAccess.getComponenteRule()); }
	 ruleComponente
{ after(grammarAccess.getComponenteRule()); } 
	 EOF 
;

// Rule Componente
ruleComponente 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponenteAccess().getAlternatives()); }
		(rule__Componente__Alternatives)
		{ after(grammarAccess.getComponenteAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventoComplexo
entryRuleEventoComplexo
:
{ before(grammarAccess.getEventoComplexoRule()); }
	 ruleEventoComplexo
{ after(grammarAccess.getEventoComplexoRule()); } 
	 EOF 
;

// Rule EventoComplexo
ruleEventoComplexo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventoComplexoAccess().getEventoComplexoKeyword()); }
		'EventoComplexo'
		{ after(grammarAccess.getEventoComplexoAccess().getEventoComplexoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventoSimples
entryRuleEventoSimples
:
{ before(grammarAccess.getEventoSimplesRule()); }
	 ruleEventoSimples
{ after(grammarAccess.getEventoSimplesRule()); } 
	 EOF 
;

// Rule EventoSimples
ruleEventoSimples 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventoSimplesAccess().getEventoSimplesKeyword()); }
		'EventoSimples'
		{ after(grammarAccess.getEventoSimplesAccess().getEventoSimplesKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGatilho
entryRuleGatilho
:
{ before(grammarAccess.getGatilhoRule()); }
	 ruleGatilho
{ after(grammarAccess.getGatilhoRule()); } 
	 EOF 
;

// Rule Gatilho
ruleGatilho 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGatilhoAccess().getAoClicarParserRuleCall()); }
		ruleAoClicar
		{ after(grammarAccess.getGatilhoAccess().getAoClicarParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAoClicar
entryRuleAoClicar
:
{ before(grammarAccess.getAoClicarRule()); }
	 ruleAoClicar
{ after(grammarAccess.getAoClicarRule()); } 
	 EOF 
;

// Rule AoClicar
ruleAoClicar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAoClicarAccess().getAoClicarKeyword()); }
		'AoClicar'
		{ after(grammarAccess.getAoClicarAccess().getAoClicarKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComportamento
entryRuleComportamento
:
{ before(grammarAccess.getComportamentoRule()); }
	 ruleComportamento
{ after(grammarAccess.getComportamentoRule()); } 
	 EOF 
;

// Rule Comportamento
ruleComportamento 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComportamentoAccess().getComportamentoKeyword()); }
		'Comportamento'
		{ after(grammarAccess.getComportamentoAccess().getComportamentoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRecurso
entryRuleRecurso
:
{ before(grammarAccess.getRecursoRule()); }
	 ruleRecurso
{ after(grammarAccess.getRecursoRule()); } 
	 EOF 
;

// Rule Recurso
ruleRecurso 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecursoAccess().getAlternatives()); }
		(rule__Recurso__Alternatives)
		{ after(grammarAccess.getRecursoAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImagem
entryRuleImagem
:
{ before(grammarAccess.getImagemRule()); }
	 ruleImagem
{ after(grammarAccess.getImagemRule()); } 
	 EOF 
;

// Rule Imagem
ruleImagem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImagemAccess().getImagemKeyword()); }
		'Imagem'
		{ after(grammarAccess.getImagemAccess().getImagemKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnimacao
entryRuleAnimacao
:
{ before(grammarAccess.getAnimacaoRule()); }
	 ruleAnimacao
{ after(grammarAccess.getAnimacaoRule()); } 
	 EOF 
;

// Rule Animacao
ruleAnimacao 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnimacaoAccess().getAnimacaoKeyword()); }
		'Animacao'
		{ after(grammarAccess.getAnimacaoAccess().getAnimacaoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTexto
entryRuleTexto
:
{ before(grammarAccess.getTextoRule()); }
	 ruleTexto
{ after(grammarAccess.getTextoRule()); } 
	 EOF 
;

// Rule Texto
ruleTexto 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextoAccess().getTextoKeyword()); }
		'Texto'
		{ after(grammarAccess.getTextoAccess().getTextoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConteudo
entryRuleConteudo
:
{ before(grammarAccess.getConteudoRule()); }
	 ruleConteudo
{ after(grammarAccess.getConteudoRule()); } 
	 EOF 
;

// Rule Conteudo
ruleConteudo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConteudoAccess().getConteudoKeyword()); }
		'Conteudo'
		{ after(grammarAccess.getConteudoAccess().getConteudoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTamanho
entryRuleTamanho
:
{ before(grammarAccess.getTamanhoRule()); }
	 ruleTamanho
{ after(grammarAccess.getTamanhoRule()); } 
	 EOF 
;

// Rule Tamanho
ruleTamanho 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTamanhoAccess().getTamanhoKeyword()); }
		'Tamanho'
		{ after(grammarAccess.getTamanhoAccess().getTamanhoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTamanhoDaFonte
entryRuleTamanhoDaFonte
:
{ before(grammarAccess.getTamanhoDaFonteRule()); }
	 ruleTamanhoDaFonte
{ after(grammarAccess.getTamanhoDaFonteRule()); } 
	 EOF 
;

// Rule TamanhoDaFonte
ruleTamanhoDaFonte 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTamanhoDaFonteAccess().getTamanhoDaFonteKeyword()); }
		'TamanhoDaFonte'
		{ after(grammarAccess.getTamanhoDaFonteAccess().getTamanhoDaFonteKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaminho
entryRuleCaminho
:
{ before(grammarAccess.getCaminhoRule()); }
	 ruleCaminho
{ after(grammarAccess.getCaminhoRule()); } 
	 EOF 
;

// Rule Caminho
ruleCaminho 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaminhoAccess().getCaminhoKeyword()); }
		'Caminho'
		{ after(grammarAccess.getCaminhoAccess().getCaminhoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConfigGeral
entryRuleConfigGeral
:
{ before(grammarAccess.getConfigGeralRule()); }
	 ruleConfigGeral
{ after(grammarAccess.getConfigGeralRule()); } 
	 EOF 
;

// Rule ConfigGeral
ruleConfigGeral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConfigGeralAccess().getConfigGeralKeyword()); }
		'ConfigGeral'
		{ after(grammarAccess.getConfigGeralAccess().getConfigGeralKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComprimentoDaTela
entryRuleComprimentoDaTela
:
{ before(grammarAccess.getComprimentoDaTelaRule()); }
	 ruleComprimentoDaTela
{ after(grammarAccess.getComprimentoDaTelaRule()); } 
	 EOF 
;

// Rule ComprimentoDaTela
ruleComprimentoDaTela 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComprimentoDaTelaAccess().getComprimentoDaTelaKeyword()); }
		'ComprimentoDaTela'
		{ after(grammarAccess.getComprimentoDaTelaAccess().getComprimentoDaTelaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlturaDaTela
entryRuleAlturaDaTela
:
{ before(grammarAccess.getAlturaDaTelaRule()); }
	 ruleAlturaDaTela
{ after(grammarAccess.getAlturaDaTelaRule()); } 
	 EOF 
;

// Rule AlturaDaTela
ruleAlturaDaTela 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlturaDaTelaAccess().getAlturaDaTelaKeyword()); }
		'AlturaDaTela'
		{ after(grammarAccess.getAlturaDaTelaAccess().getAlturaDaTelaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuestao
entryRuleQuestao
:
{ before(grammarAccess.getQuestaoRule()); }
	 ruleQuestao
{ after(grammarAccess.getQuestaoRule()); } 
	 EOF 
;

// Rule Questao
ruleQuestao 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuestaoAccess().getQuestaoKeyword()); }
		'Questao'
		{ after(grammarAccess.getQuestaoAccess().getQuestaoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlternativa
entryRuleAlternativa
:
{ before(grammarAccess.getAlternativaRule()); }
	 ruleAlternativa
{ after(grammarAccess.getAlternativaRule()); } 
	 EOF 
;

// Rule Alternativa
ruleAlternativa 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlternativaAccess().getAlternativaKeyword()); }
		'Alternativa'
		{ after(grammarAccess.getAlternativaAccess().getAlternativaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnunciado
entryRuleEnunciado
:
{ before(grammarAccess.getEnunciadoRule()); }
	 ruleEnunciado
{ after(grammarAccess.getEnunciadoRule()); } 
	 EOF 
;

// Rule Enunciado
ruleEnunciado 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnunciadoAccess().getEnunciadoKeyword()); }
		'Enunciado'
		{ after(grammarAccess.getEnunciadoAccess().getEnunciadoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResposta
entryRuleResposta
:
{ before(grammarAccess.getRespostaRule()); }
	 ruleResposta
{ after(grammarAccess.getRespostaRule()); } 
	 EOF 
;

// Rule Resposta
ruleResposta 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRespostaAccess().getRespostaKeyword()); }
		'Resposta'
		{ after(grammarAccess.getRespostaAccess().getRespostaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormatoQuiz
entryRuleFormatoQuiz
:
{ before(grammarAccess.getFormatoQuizRule()); }
	 ruleFormatoQuiz
{ after(grammarAccess.getFormatoQuizRule()); } 
	 EOF 
;

// Rule FormatoQuiz
ruleFormatoQuiz 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormatoQuizAccess().getFormatoQuizKeyword()); }
		'FormatoQuiz'
		{ after(grammarAccess.getFormatoQuizAccess().getFormatoQuizKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEstado
entryRuleEstado
:
{ before(grammarAccess.getEstadoRule()); }
	 ruleEstado
{ after(grammarAccess.getEstadoRule()); } 
	 EOF 
;

// Rule Estado
ruleEstado 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEstadoAccess().getEstadoKeyword()); }
		'Estado'
		{ after(grammarAccess.getEstadoAccess().getEstadoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEstadoFinal
entryRuleEstadoFinal
:
{ before(grammarAccess.getEstadoFinalRule()); }
	 ruleEstadoFinal
{ after(grammarAccess.getEstadoFinalRule()); } 
	 EOF 
;

// Rule EstadoFinal
ruleEstadoFinal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEstadoFinalAccess().getEstadoFinalKeyword()); }
		'EstadoFinal'
		{ after(grammarAccess.getEstadoFinalAccess().getEstadoFinalKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEstadoInicial
entryRuleEstadoInicial
:
{ before(grammarAccess.getEstadoInicialRule()); }
	 ruleEstadoInicial
{ after(grammarAccess.getEstadoInicialRule()); } 
	 EOF 
;

// Rule EstadoInicial
ruleEstadoInicial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEstadoInicialAccess().getEstadoInicialKeyword()); }
		'EstadoInicial'
		{ after(grammarAccess.getEstadoInicialAccess().getEstadoInicialKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProximoEstados
entryRuleProximoEstados
:
{ before(grammarAccess.getProximoEstadosRule()); }
	 ruleProximoEstados
{ after(grammarAccess.getProximoEstadosRule()); } 
	 EOF 
;

// Rule ProximoEstados
ruleProximoEstados 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProximoEstadosAccess().getProximoEstadosKeyword()); }
		'ProximoEstados'
		{ after(grammarAccess.getProximoEstadosAccess().getProximoEstadosKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItem
entryRuleItem
:
{ before(grammarAccess.getItemRule()); }
	 ruleItem
{ after(grammarAccess.getItemRule()); } 
	 EOF 
;

// Rule Item
ruleItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItemAccess().getItemKeyword()); }
		'Item'
		{ after(grammarAccess.getItemAccess().getItemKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEfeito
entryRuleEfeito
:
{ before(grammarAccess.getEfeitoRule()); }
	 ruleEfeito
{ after(grammarAccess.getEfeitoRule()); } 
	 EOF 
;

// Rule Efeito
ruleEfeito 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEfeitoAccess().getEfeitoKeyword()); }
		'Efeito'
		{ after(grammarAccess.getEfeitoAccess().getEfeitoKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEstadosAfetados
entryRuleEstadosAfetados
:
{ before(grammarAccess.getEstadosAfetadosRule()); }
	 ruleEstadosAfetados
{ after(grammarAccess.getEstadosAfetadosRule()); } 
	 EOF 
;

// Rule EstadosAfetados
ruleEstadosAfetados 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEstadosAfetadosAccess().getEstadosAfetadosKeyword()); }
		'EstadosAfetados'
		{ after(grammarAccess.getEstadosAfetadosAccess().getEstadosAfetadosKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__ElementTypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractElementAccess().getElementTypePackageDeclarationParserRuleCall_0_0()); }
		rulePackageDeclaration
		{ after(grammarAccess.getAbstractElementAccess().getElementTypePackageDeclarationParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractElementAccess().getElementTypeAbstractClassParserRuleCall_0_1()); }
		ruleAbstractClass
		{ after(grammarAccess.getAbstractElementAccess().getElementTypeAbstractClassParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__NameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractClassAccess().getNameIDTerminalRuleCall_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAbstractClassAccess().getNameIDTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassAccess().getNameEVENT_CODETerminalRuleCall_1_0_1()); }
		RULE_EVENT_CODE
		{ after(grammarAccess.getAbstractClassAccess().getNameEVENT_CODETerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClassType__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeTelaParserRuleCall_0_0()); }
		ruleTela
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeTelaParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeObjetoParserRuleCall_0_1()); }
		ruleObjeto
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeObjetoParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeRecursoParserRuleCall_0_2()); }
		ruleRecurso
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeRecursoParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeComponenteParserRuleCall_0_3()); }
		ruleComponente
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeComponenteParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeEventoComplexoParserRuleCall_0_4()); }
		ruleEventoComplexo
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeEventoComplexoParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeConfigGeralParserRuleCall_0_5()); }
		ruleConfigGeral
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeConfigGeralParserRuleCall_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeEstadoParserRuleCall_0_6()); }
		ruleEstado
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeEstadoParserRuleCall_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeItemParserRuleCall_0_7()); }
		ruleItem
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeItemParserRuleCall_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeAlternativaParserRuleCall_0_8()); }
		ruleAlternativa
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeAlternativaParserRuleCall_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeQuestaoParserRuleCall_0_9()); }
		ruleQuestao
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeQuestaoParserRuleCall_0_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractProperty__FormatAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractPropertyAccess().getFormatClassReferenceParserRuleCall_0_0_0()); }
		ruleClassReference
		{ after(grammarAccess.getAbstractPropertyAccess().getFormatClassReferenceParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractPropertyAccess().getFormatPropertyParserRuleCall_0_0_1()); }
		ruleProperty
		{ after(grammarAccess.getAbstractPropertyAccess().getFormatPropertyParserRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__PropertyTypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypePosicaoParserRuleCall_0_0()); }
		rulePosicao
		{ after(grammarAccess.getPropertyAccess().getPropertyTypePosicaoParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeEstaAtivoParserRuleCall_0_1()); }
		ruleestaAtivo
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeEstaAtivoParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeCaminhoParserRuleCall_0_2()); }
		ruleCaminho
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeCaminhoParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeTamanhoDaFonteParserRuleCall_0_3()); }
		ruleTamanhoDaFonte
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeTamanhoDaFonteParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeConteudoParserRuleCall_0_4()); }
		ruleConteudo
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeConteudoParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeTamanhoParserRuleCall_0_5()); }
		ruleTamanho
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeTamanhoParserRuleCall_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeIUParserRuleCall_0_6()); }
		ruleIU
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeIUParserRuleCall_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeEventoSimplesParserRuleCall_0_7()); }
		ruleEventoSimples
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeEventoSimplesParserRuleCall_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeComprimentoDaTelaParserRuleCall_0_8()); }
		ruleComprimentoDaTela
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeComprimentoDaTelaParserRuleCall_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeAlturaDaTelaParserRuleCall_0_9()); }
		ruleAlturaDaTela
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeAlturaDaTelaParserRuleCall_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeEfeitoParserRuleCall_0_10()); }
		ruleEfeito
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeEfeitoParserRuleCall_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeEstadosAfetadosParserRuleCall_0_11()); }
		ruleEstadosAfetados
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeEstadosAfetadosParserRuleCall_0_11()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeEstadoInicialParserRuleCall_0_12()); }
		ruleEstadoInicial
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeEstadoInicialParserRuleCall_0_12()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeEstadoFinalParserRuleCall_0_13()); }
		ruleEstadoFinal
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeEstadoFinalParserRuleCall_0_13()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeProximoEstadosParserRuleCall_0_14()); }
		ruleProximoEstados
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeProximoEstadosParserRuleCall_0_14()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeFormatoQuizParserRuleCall_0_15()); }
		ruleFormatoQuiz
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeFormatoQuizParserRuleCall_0_15()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeEnunciadoParserRuleCall_0_16()); }
		ruleEnunciado
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeEnunciadoParserRuleCall_0_16()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeRespostaParserRuleCall_0_17()); }
		ruleResposta
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeRespostaParserRuleCall_0_17()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getValueAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getBooleanParserRuleCall_1()); }
		ruleBoolean
		{ after(grammarAccess.getValueAccess().getBooleanParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getUNITYINTDECIMALTerminalRuleCall_2()); }
		RULE_UNITYINTDECIMAL
		{ after(grammarAccess.getValueAccess().getUNITYINTDECIMALTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getINTEGERTerminalRuleCall_3()); }
		RULE_INTEGER
		{ after(grammarAccess.getValueAccess().getINTEGERTerminalRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getPATHTerminalRuleCall_4()); }
		RULE_PATH
		{ after(grammarAccess.getValueAccess().getPATHTerminalRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getUI_TYPETerminalRuleCall_5()); }
		RULE_UI_TYPE
		{ after(grammarAccess.getValueAccess().getUI_TYPETerminalRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getSIMPLE_EVENT_TYPETerminalRuleCall_6()); }
		RULE_SIMPLE_EVENT_TYPE
		{ after(grammarAccess.getValueAccess().getSIMPLE_EVENT_TYPETerminalRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getEVENT_CODETerminalRuleCall_7()); }
		RULE_EVENT_CODE
		{ after(grammarAccess.getValueAccess().getEVENT_CODETerminalRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getEFEITO_ACTIONTerminalRuleCall_8()); }
		RULE_EFEITO_ACTION
		{ after(grammarAccess.getValueAccess().getEFEITO_ACTIONTerminalRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getTEXT_CONTENTTerminalRuleCall_9()); }
		RULE_TEXT_CONTENT
		{ after(grammarAccess.getValueAccess().getTEXT_CONTENTTerminalRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Componente__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponenteAccess().getGatilhoParserRuleCall_0()); }
		ruleGatilho
		{ after(grammarAccess.getComponenteAccess().getGatilhoParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComponenteAccess().getComportamentoParserRuleCall_1()); }
		ruleComportamento
		{ after(grammarAccess.getComponenteAccess().getComportamentoParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurso__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecursoAccess().getImagemParserRuleCall_0()); }
		ruleImagem
		{ after(grammarAccess.getRecursoAccess().getImagemParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRecursoAccess().getAnimacaoParserRuleCall_1()); }
		ruleAnimacao
		{ after(grammarAccess.getRecursoAccess().getAnimacaoParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRecursoAccess().getTextoParserRuleCall_2()); }
		ruleTexto
		{ after(grammarAccess.getRecursoAccess().getTextoParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getFALSETerminalRuleCall_0()); }
		RULE_FALSE
		{ after(grammarAccess.getBooleanAccess().getFALSETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getTRUETerminalRuleCall_1()); }
		RULE_TRUE
		{ after(grammarAccess.getBooleanAccess().getTRUETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
	(rule__PackageDeclaration__NameAssignment_1)
	{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractClass__Group__0__Impl
	rule__AbstractClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractClassAccess().getTypeAssignment_0()); }
	(rule__AbstractClass__TypeAssignment_0)
	{ after(grammarAccess.getAbstractClassAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractClass__Group__1__Impl
	rule__AbstractClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractClassAccess().getNameAssignment_1()); }
	(rule__AbstractClass__NameAssignment_1)
	{ after(grammarAccess.getAbstractClassAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractClass__Group__2__Impl
	rule__AbstractClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractClassAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getAbstractClassAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractClass__Group__3__Impl
	rule__AbstractClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractClassAccess().getAbstractPropertiesAssignment_3()); }
	(rule__AbstractClass__AbstractPropertiesAssignment_3)*
	{ after(grammarAccess.getAbstractClassAccess().getAbstractPropertiesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractClass__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractClassAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getAbstractClassAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractProperty__Group__0__Impl
	rule__AbstractProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractPropertyAccess().getFormatAssignment_0()); }
	(rule__AbstractProperty__FormatAssignment_0)
	{ after(grammarAccess.getAbstractPropertyAccess().getFormatAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractProperty__Group__1__Impl
	rule__AbstractProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractPropertyAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getAbstractPropertyAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractProperty__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractProperty__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractProperty__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractPropertyAccess().getValuesAssignment_2()); }
	(rule__AbstractProperty__ValuesAssignment_2)*
	{ after(grammarAccess.getAbstractPropertyAccess().getValuesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__AbstractElmentsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getAbstractElmentsAbstractElementParserRuleCall_0()); }
		ruleAbstractElement
		{ after(grammarAccess.getModelAccess().getAbstractElmentsAbstractElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__ElementTypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractElementAccess().getElementTypeAlternatives_0()); }
		(rule__AbstractElement__ElementTypeAlternatives_0)
		{ after(grammarAccess.getAbstractElementAccess().getElementTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractClassAccess().getTypeAbstractClassTypeParserRuleCall_0_0()); }
		ruleAbstractClassType
		{ after(grammarAccess.getAbstractClassAccess().getTypeAbstractClassTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractClassAccess().getNameAlternatives_1_0()); }
		(rule__AbstractClass__NameAlternatives_1_0)
		{ after(grammarAccess.getAbstractClassAccess().getNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClass__AbstractPropertiesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractClassAccess().getAbstractPropertiesAbstractPropertyParserRuleCall_3_0()); }
		ruleAbstractProperty
		{ after(grammarAccess.getAbstractClassAccess().getAbstractPropertiesAbstractPropertyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractClassType__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractClassTypeAccess().getTypeAlternatives_0()); }
		(rule__AbstractClassType__TypeAlternatives_0)
		{ after(grammarAccess.getAbstractClassTypeAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractProperty__FormatAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractPropertyAccess().getFormatAlternatives_0_0()); }
		(rule__AbstractProperty__FormatAlternatives_0_0)
		{ after(grammarAccess.getAbstractPropertyAccess().getFormatAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractProperty__ValuesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractPropertyAccess().getValuesValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getAbstractPropertyAccess().getValuesValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassReference__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassReferenceAccess().getTypeAbstractClassTypeParserRuleCall_0()); }
		ruleAbstractClassType
		{ after(grammarAccess.getClassReferenceAccess().getTypeAbstractClassTypeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__PropertyTypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyTypeAlternatives_0()); }
		(rule__Property__PropertyTypeAlternatives_0)
		{ after(grammarAccess.getPropertyAccess().getPropertyTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_TEXT_CONTENT : RULE_STRING;

RULE_EFEITO_ACTION : ('[Bloqueia]'|'[Adiciona]');

RULE_UI_TYPE : ('[Botao]'|'[Imagem]'|'[Animacao]'|'[Texto]');

RULE_SIMPLE_EVENT_TYPE : '[proximaTela]';

RULE_UNITYINTDECIMAL : ('0'..'9')+ '.' '0'..'9';

RULE_INTEGER : '1'..'9' ('0'..'9')+;

RULE_PATH : RULE_SLASH (RULE_ID RULE_SLASH)*;

fragment RULE_SLASH : ('/'|'\b');

RULE_FALSE : 'false';

RULE_TRUE : 'true';

RULE_EVENT_CODE : 'A'..'Z' 'A'..'Z' 'A'..'Z' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

fragment RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
