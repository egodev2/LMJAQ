/*
 * generated by Xtext 2.25.0
 */
package org.xtext.lmjaq.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.lmjaq.lMJAQ.Model
import org.junit.Assert
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.xtext.lmjaq.lMJAQ.LMJAQPackage
import org.xtext.lmjaq.validation.LMJAQValidator

@ExtendWith(InjectionExtension)
@InjectWith(LMJAQInjectorProvider)
class LMJAQValidationTest {
	
	@Inject
	ParseHelper<Model> parseHelper
	
	@Inject extension ValidationTestHelper 
	

	// parse Retorna um modelo EMF: mesmo com erro de syntax;.
	// ValidationTestHelper -> assertNoErrors

	@Test
	def duplicateProeprtyTest()
	{
		val result = parseHelper.parse('''
			package objetos.objeto1
			
			Tela mnhaTela
			{
				Posicao : 100.1 12.1
				Posicao : 100.1 12.2
				Objeto : objeto1234512sad
			}
		''')
		
		result.assertDuplicateProperty("Posicao","minhaTela")
	}
	
	def private assertDuplicateProperty(Model m, String propertyName, String className)
	{
		m.assertError(LMJAQPackage.eINSTANCE.abstractClass,
					 LMJAQValidator.DUPLICATE_PROPERTY			 
		)
		
		/*
		m.assertError(LMJAQPackage.eINSTANCE.property,
					 "Mais de uma propriedade do mesmo tipo declarada. Exclua uma delas. '" + propertyName + "'", 
					 LMJAQValidator.DUPLICATE_PROPERTY)
					 * */
					 
		
	}
}
