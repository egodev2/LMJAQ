/*
 * generated by Xtext 2.25.0
 */
package org.xtext.lmjaq.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.lmjaq.ide.contentassist.antlr.internal.InternalLMJAQParser;
import org.xtext.lmjaq.services.LMJAQGrammarAccess;

public class LMJAQParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LMJAQGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LMJAQGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getElementTypeAlternatives_0(), "rule__AbstractElement__ElementTypeAlternatives_0");
			builder.put(grammarAccess.getAbstractClassAccess().getNameAlternatives_1_0(), "rule__AbstractClass__NameAlternatives_1_0");
			builder.put(grammarAccess.getAbstractClassTypeAccess().getTypeAlternatives_0(), "rule__AbstractClassType__TypeAlternatives_0");
			builder.put(grammarAccess.getAbstractPropertyAccess().getFormatAlternatives_0_0(), "rule__AbstractProperty__FormatAlternatives_0_0");
			builder.put(grammarAccess.getPropertyAccess().getPropertyTypeAlternatives_0(), "rule__Property__PropertyTypeAlternatives_0");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getComponenteAccess().getAlternatives(), "rule__Componente__Alternatives");
			builder.put(grammarAccess.getRecursoAccess().getAlternatives(), "rule__Recurso__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getAbstractClassAccess().getGroup(), "rule__AbstractClass__Group__0");
			builder.put(grammarAccess.getAbstractPropertyAccess().getGroup(), "rule__AbstractProperty__Group__0");
			builder.put(grammarAccess.getModelAccess().getAbstractElmentsAssignment(), "rule__Model__AbstractElmentsAssignment");
			builder.put(grammarAccess.getAbstractElementAccess().getElementTypeAssignment(), "rule__AbstractElement__ElementTypeAssignment");
			builder.put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getAbstractClassAccess().getTypeAssignment_0(), "rule__AbstractClass__TypeAssignment_0");
			builder.put(grammarAccess.getAbstractClassAccess().getNameAssignment_1(), "rule__AbstractClass__NameAssignment_1");
			builder.put(grammarAccess.getAbstractClassAccess().getAbstractPropertiesAssignment_3(), "rule__AbstractClass__AbstractPropertiesAssignment_3");
			builder.put(grammarAccess.getAbstractClassTypeAccess().getTypeAssignment(), "rule__AbstractClassType__TypeAssignment");
			builder.put(grammarAccess.getAbstractPropertyAccess().getFormatAssignment_0(), "rule__AbstractProperty__FormatAssignment_0");
			builder.put(grammarAccess.getAbstractPropertyAccess().getValuesAssignment_2(), "rule__AbstractProperty__ValuesAssignment_2");
			builder.put(grammarAccess.getClassReferenceAccess().getTypeAssignment(), "rule__ClassReference__TypeAssignment");
			builder.put(grammarAccess.getPropertyAccess().getPropertyTypeAssignment(), "rule__Property__PropertyTypeAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LMJAQGrammarAccess grammarAccess;

	@Override
	protected InternalLMJAQParser createParser() {
		InternalLMJAQParser result = new InternalLMJAQParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LMJAQGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LMJAQGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
